name: BaekjoonHub to Blog
on:
  push:
    paths:
      - '**/README.md'  # README.md 파일이 푸시될 때만 트리거

jobs:
  update-blog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout BaekjoonHub Repository
        uses: actions/checkout@v2
        with:
          repository: 'sms1875/CodingTestStudy'
          path: 'BaekjoonHub'

      - name: Convert Each README.md to Individual Blog Post
        id: convert
        run: |
          mkdir -p ./BaekjoonHub/_posts
          COMMIT_DATE=$(date -u +"%Y-%m-%d")

          # Set LC_ALL to avoid locale issues with sed
          export LC_ALL=C

          # Iterate through each README.md file
          for readme in $(find ./BaekjoonHub -name "README.md"); do
            # Get directory of README file to find code files
            PROBLEM_DIR=$(dirname "$readme")
            
            # Extract problem information from README.md
            TITLE=$(head -n 1 "$readme" | sed 's/\[//;s/\]//;s/ - /: /')
            
            # Remove special characters safely (영문, 한글, 숫자, 공백, _, - 만 남김)
            SAFE_TITLE=$(echo "$TITLE" | sed 's/[^a-zA-Z0-9가-힣 _-]//g')
            
            # 플랫폼 추출 (백준, SWEA 등)
            PLATFORM=$(echo "$TITLE" | awk '{print $1}')

            # Markdown 헤더 부분 구성
            MARKDOWN_HEADER="---\n"
            MARKDOWN_HEADER+="title: \"$TITLE\"\n"
            MARKDOWN_HEADER+="date: $COMMIT_DATE\n"
            MARKDOWN_HEADER+="categories: [ \"coding test\" ]\n"
            MARKDOWN_HEADER+="tags: [ \"$PLATFORM\", \"coding test\" ]\n"
            MARKDOWN_HEADER+="---\n\n"

            # README.md 내용 파싱
            PROBLEM_INFO=$(cat "$readme" | sed 's/{{/\\{\\{/g; s/{%/\\{%/g')

            # Markdown 내용 구성
            MARKDOWN_CONTENT="$MARKDOWN_HEADER$PROBLEM_INFO\n"

            # 해당 디렉토리의 코드 파일을 찾아 추가
            CODE_FILES=$(find "$PROBLEM_DIR" -type f \( -name "*.cpp" -o -name "*.java" -o -name "*.py" -o -name "*.cc" \))

            # 각 코드 파일을 Markdown에 추가
            for code in $CODE_FILES; do
              LANG=$(echo "$code" | sed 's/.*\.//')  # 확장자로 언어 구분
              CODE_BLOCK=$(cat "$code")

              # 이스케이프 처리: {{, }}와 {% %}를 코드 내에서 찾아 자동 변환
              ESCAPED_CODE_BLOCK=$(echo "$CODE_BLOCK" | sed 's/{{/\\{\\{/g; s/}}/\\}\\}/g; s/{%/\\{%/g; s/%}/\\%}/g')

              # Jekyll에서 템플릿으로 해석되지 않도록 raw 태그로 감싸기
              MARKDOWN_CONTENT="$MARKDOWN_CONTENT\n\n### 소스 코드 ($LANG)\n{% raw %}\n\`\`\`$LANG\n$ESCAPED_CODE_BLOCK\n\`\`\`\n{% endraw %}"
            done

            # 파일 이름을 커밋 날짜와 문제 제목을 기반으로 생성
            FILENAME=$(echo "$COMMIT_DATE-$SAFE_TITLE.md" | sed 's/ /-/g')

            # Markdown 파일을 _posts 디렉토리에 생성
            echo -e "$MARKDOWN_CONTENT" > "./BaekjoonHub/_posts/$FILENAME"
          done

      - name: Checkout Chirpy Blog Repository
        uses: actions/checkout@v2
        with:
          repository: 'sms1875/sms1875.github.io'
          path: 'ChirpyBlog'
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Move Generated Files to Blog
        run: |
          cp -R ./BaekjoonHub/_posts/* ./ChirpyBlog/_posts/

      - name: Commit and Push to Chirpy Blog
        working-directory: ChirpyBlog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Add new problem posts from BaekjoonHub"
          git push origin main
